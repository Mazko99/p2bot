import logging
import asyncio
import json
import pandas as pd
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext


API_TOKEN = "7079057857:AAEtlYk_l1eTczU8_a9LU4tVD1lVmpwdAOE"
ADMIN_IDS = {5138418509}
MIN_TOPUP = 10


bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

user_balances = {}
banned_users = set()
user_ads = {"buy": [], "sell": []}
def banks(*names):
    return list(names)
merchant_deposits = {}


BALANCE_FILE = "balances.json"

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É ---
def load_balances():
    global user_balances
    if os.path.exists(BALANCE_FILE):
        with open(BALANCE_FILE, "r") as f:
            user_balances = json.load(f)
            user_balances = {int(k): v for k, v in user_balances.items()}
    else:
        user_balances = {}

# --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É ---
def save_balances():
    with open(BALANCE_FILE, "w") as f:
        json.dump(user_balances, f, indent=2)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
load_balances()


def ad(u, r, lim, b, cur="USDT (TRC20)", t="sell", terms="–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"):
    return {
        "username": u,
        "verified": True,
        "rate": r,
        "limit": lim,
        "banks": b,
        "currency": cur,
        "type": t,
        "terms": terms
    }

user_ads["sell"] = [
    ad("@CryptoBoss",   42.91, "500 ‚Äì 2000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "A-Bank", "Sense Bank"), t="sell"),
    ad("@UkrTrader",    42.95, "500 ‚Äì 2000 –≥—Ä–Ω", banks("Monobank", "Sense Bank", "Ukrsibbank", "Concord Bank"), t="sell"),
    ad("@BestRate24",   42.92, "500 ‚Äì 2000 –≥—Ä–Ω", banks("PrivatBank", "PUMB", "OTP Bank", "Oschadbank", "Raiffeisen"), t="sell"),
    ad("@FastUSDT",     42.93, "500 ‚Äì 2000 –≥—Ä–Ω", banks("Monobank", "PUMB", "MTB Bank", "Globus Bank"), t="sell"),
    ad("@TrustExchanger",42.96, "500 ‚Äì 2000 –≥—Ä–Ω", banks("Raiffeisen", "Sense Bank", "PrivatBank", "Ukrsibbank", "Oschadbank"), t="sell"),
    ad("@VerifedPro",   42.90, "500 ‚Äì 2000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "A-Bank", "Credit Agricole"), t="sell"),
    ad("@TetherKing",   42.97, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "Raiffeisen", "Sense Bank", "OTP Bank"), t="sell"),
    ad("@CashToCoin",   43.01, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("PrivatBank", "PUMB", "Ukrsibbank", "Concord Bank", "Oschadbank"), t="sell"),
    ad("@EasyChange",   42.98, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "MTB Bank"), t="sell"),
    ad("@USDTbanker",   43.05, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("Raiffeisen", "PrivatBank", "Sense Bank", "Monobank", "Globus Bank", "Tascombank"), t="sell"),
    ad("@ExchangePlus", 43.02, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "Oschadbank", "Ukrsibbank"), t="sell"),
    ad("@BitProfi",     42.94, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "Oschadbank", "OTP Bank", "Credit Agricole"), t="sell"),
    ad("@FiatBridge",   43.00, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "Sense Bank", "Ukrsibbank"), t="sell"),
    ad("@DigitalGate",  43.03, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("PrivatBank", "PUMB", "Raiffeisen", "Sense Bank", "Oschadbank"), t="sell"),
    ad("@FastMoney",    43.21, "6000 ‚Äì 40000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "Raiffeisen", "Sense Bank", "Ukrsibbank", "Concord Bank"), t="sell"),
    ad("@TokenExpress", 43.38, "6000 ‚Äì 40000 –≥—Ä–Ω", banks("PrivatBank", "PUMB", "Oschadbank", "Ukrsibbank", "Concord Bank", "Globus Bank"), t="sell"),
    ad("@FixRate",      43.45, "6000 ‚Äì 40000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "A-Bank", "Sense Bank", "OTP Bank"), t="sell"),
    ad("@UkrUSDT",      43.32, "6000 ‚Äì 40000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "Raiffeisen", "Oschadbank"), t="sell"),
    ad("@MonoCrypto",   43.29, "6000 ‚Äì 40000 –≥—Ä–Ω", banks("PrivatBank", "PUMB", "Oschadbank", "Tascombank", "Credit Agricole", "MTB Bank"), t="sell"),
    ad("@VerifiedX",    43.50, "6000 ‚Äì 40000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "Raiffeisen", "Sense Bank", "Ukrsibbank", "Concord Bank", "Globus Bank"), t="sell"),
    ad("@RateMaster",   43.40, "6000 ‚Äì 40000 –≥—Ä–Ω", banks("PrivatBank", "PUMB", "Oschadbank", "Ukrsibbank", "OTP Bank", "Credit Agricole"), t="sell"),
]
# –ü—Ä–æ—Å—Ç–∞–≤–ª—è—î–º–æ –∑–∞—Å—Ç–∞–≤—É –¥–ª—è —Ñ–µ–π–∫–æ–≤–∏—Ö
fake_usernames = [ad["username"] for ad in user_ads["sell"] + user_ads["buy"]]
for name in fake_usernames:
    if name.startswith("@"):
        # –ü—Ä–æ—Å—Ç–æ –¥–∞–º–æ —ó–º 500/500 –∑–∞—Å—Ç–∞–≤—É
        merchant_deposits[name] = {
            "amount": 500,
            "target": 500,
            "verified": True
        }

user_ads["buy"] = [
    ad("@CryptoBoss",   43.1, "500 ‚Äì 2000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "A-Bank", "Sense Bank"), t="buy"),
    ad("@UkrTrader",    43.6, "500 ‚Äì 2000 –≥—Ä–Ω", banks("Monobank", "Sense Bank", "Ukrsibbank", "Concord Bank"), t="buy"),
    ad("@BestRate24",   41.78, "500 ‚Äì 2000 –≥—Ä–Ω", banks("PrivatBank", "PUMB", "OTP Bank", "Oschadbank", "Raiffeisen"), t="buy"),
    ad("@FastUSDT",     43.48, "500 ‚Äì 2000 –≥—Ä–Ω", banks("Monobank", "PUMB", "MTB Bank", "Globus Bank"), t="buy"),
    ad("@TrustExchanger",43.29, "500 ‚Äì 2000 –≥—Ä–Ω", banks("Raiffeisen", "Sense Bank", "PrivatBank", "Ukrsibbank", "Oschadbank"), t="buy"),
    ad("@VerifedPro",   43.76, "500 ‚Äì 2000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "A-Bank", "Credit Agricole"), t="buy"),
    ad("@TetherKing",   43.68, "500 ‚Äì 2000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "Raiffeisen"), t="buy"),
    ad("@CashToCoin",   43.92, "500 ‚Äì 2000 –≥—Ä–Ω", banks("PrivatBank", "PUMB", "Ukrsibbank", "Concord Bank"), t="buy"),
    ad("@EasyChange",   43.63, "500 ‚Äì 2000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "MTB Bank"), t="buy"),
    ad("@USDTbanker",   43.45, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("Raiffeisen", "PrivatBank", "Sense Bank", "Monobank", "Globus Bank", "Tascombank"), t="buy"),
    ad("@ExchangePlus", 43.15, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "Oschadbank", "Ukrsibbank"), t="buy"),
    ad("@BitProfi",     43.38, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "Oschadbank", "OTP Bank", "Credit Agricole"), t="buy"),
    ad("@FiatBridge",   43.40, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "Sense Bank", "Ukrsibbank"), t="buy"),
    ad("@DigitalGate",  41.89, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("PrivatBank", "PUMB", "Raiffeisen", "Sense Bank", "Oschadbank"), t="buy"),
    ad("@FastMoney",    43.29, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "Raiffeisen", "Sense Bank"), t="buy"),
    ad("@TokenExpress", 42.26, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("PrivatBank", "PUMB", "Oschadbank", "Ukrsibbank", "Concord Bank", "Globus Bank"), t="buy"),
    ad("@FixRate",      42.33, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "A-Bank", "Sense Bank", "OTP Bank"), t="buy"),
    ad("@UkrUSDT",      43.27, "2000 ‚Äì 6000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "Raiffeisen", "Oschadbank"), t="buy"),
    ad("@MonoCrypto",   43.61, "6000 ‚Äì 40000 –≥—Ä–Ω", banks("PrivatBank", "PUMB", "Oschadbank", "Tascombank", "Credit Agricole", "MTB Bank"), t="buy"),
    ad("@VerifiedX",    43.68, "6000 ‚Äì 40000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "Raiffeisen", "Sense Bank", "Ukrsibbank", "Concord Bank", "Globus Bank"), t="buy"),
    ad("@RateMaster",   42.70, "6000 ‚Äì 40000 –≥—Ä–Ω", banks("PrivatBank", "PUMB", "Oschadbank", "Ukrsibbank", "OTP Bank", "Credit Agricole"), t="buy"),
    ad("@FixSpread",    43.62, "6000 ‚Äì 40000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "Raiffeisen", "Sense Bank"), t="buy"),
    ad("@UAChanger",    42.66, "6000 ‚Äì 40000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "Ukrsibbank", "Concord Bank"), t="buy"),
    ad("@DeepRate",     43.69, "6000 ‚Äì 40000 –≥—Ä–Ω", banks("PrivatBank", "PUMB", "Oschadbank", "Ukrsibbank", "Concord Bank", "Globus Bank"), t="buy"),
    ad("@NightTrader",  43.64, "6000 ‚Äì 40000 –≥—Ä–Ω", banks("Monobank", "PrivatBank", "PUMB", "Raiffeisen", "Oschadbank"), t="buy"),
]


chat_links = {}
await_screenshot = set()
active_orders = {}


wallets = {
    "USDT (TRC20)": "TQz9gQCkYpARgjhZ3LkgvjBPXP3CbHLs4j",
    "USDT (TON)":
"UQDrzrCu7PcyQYxkREgk6sUfkVk2kvox8PwE63ZE6EupBljy",
    "BTC": "13tERrpTrtWP42ehZKBZ4qcN9ESE4UCXUS",
    "ETH (ERC20)": "0xef2adf5e2e761a3b64846ac46ae1f10e400dc652",
    "BNB (BEP20)": "0xef2adf5e2e761a3b64846ac46ae1f10e400dc652",
    "TRX": "TQz9gQCkYpARgjhZ3LkgvjBPXP3CbHLs4j"
}

ADMIN_IDS = {5138418509}  # ‚Üê –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID

def get_main_kb(user_id=None):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üü¢ –ü–æ–∫—É–ø–∫–∞ USDT"), KeyboardButton("üî¥ –ü—Ä–æ–¥–∞–∂–∞ USDT"))
    kb.add(KeyboardButton("üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"), KeyboardButton("üëõ –ö–æ—à–µ–ª—ë–∫"))
    kb.add(KeyboardButton("üìã –û–±—ä—è–≤–ª–µ–Ω–∏—è"), KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"))
    kb.add(KeyboardButton("üîª –í—ã–≤–µ—Å—Ç–∏ USDT"), KeyboardButton("üóÇ –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞"))

    if user_id in ADMIN_IDS:
        kb.add(KeyboardButton("üó®Ô∏è –ß–∞—Ç—ã"))

    return kb




def get_range_kb(prefix):
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("500‚Äì2000 ‚Ç¥", callback_data=f"{prefix}:500-2000"),
        InlineKeyboardButton("2000‚Äì6000 ‚Ç¥", callback_data=f"{prefix}:2000-6000"),
        InlineKeyboardButton("6000‚Äì40000 ‚Ç¥", callback_data=f"{prefix}:6000-40000")
    )
    return kb

def parse_limit(limit_str):
    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –≤–∞–ª—é—Ç—É, –ø—Ä–æ–±—ñ–ª–∏, —Ç–∏—Ä–µ
    clean = limit_str.replace("‚Ç¥", "").replace("–≥—Ä–Ω", "").replace(" ", "").replace(",", "")
    # –£–Ω—ñ—Ñ—ñ–∫—É—î–º–æ —Ç–∏—Ä–µ
    clean = clean.replace("‚Äì", "-")

    if "-" not in clean:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞")

    a, b = clean.split("-")
    return int(a), int(b)



def fmt_ad(ad, idx):
    # –û—Ç—Ä–∏–º–∞—Ç–∏ ID –ø—Ä–æ–¥–∞–≤—Ü—è, —è–∫—â–æ —Ü–µ User_<id>
    pledge_str = "‚Äî"
    if ad["username"].startswith("User_"):
        uid = int(ad["username"].replace("User_", ""))
        pledge_str = get_pledge_string(uid)
    else:
        # –§–µ–π–∫–æ–≤—ñ ‚Äî –¥–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—É –∑–∞—Å—Ç–∞–≤—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 500/500
        pledge_str = "500/500$"

    return (
        f"<b>#{idx+1} | {ad['type'].upper()}</b>\n"
        f"‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ ‚Ä¢ <code>{ad['username']}</code>\n"
        f"–ö—É—Ä—Å: <b>{ad['rate']}</b> ‚Ç¥\n"
        f"–û–±—ä—ë–º: <b>{ad['limit']}</b>\n"
        f"–ë–∞–Ω–∫–∏: <i>{', '.join(ad['banks'])}</i>\n"
        f"–ó–∞–ª–æ–≥: <b>{pledge_str}</b>\n"
        f"–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: 15 –º–∏–Ω\n"
        f"–£—Å–ª–æ–≤–∏—è: {ad.get('terms', '‚Äî')}"
    )
def get_admin_delete_kb(idx, ad_type):
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å (–∞–¥–º–∏–Ω–æ–º)", callback_data=f"admin_del:{ad_type}:{idx}")
    )

def ensure_balance(user_id):
    if user_id not in user_balances:
        user_balances[user_id] = {k: 0 for k in wallets}

def get_wallets_text():
    return "\n".join([f"<b>{k}</b>: <code>{v}</code>" for k, v in wallets.items()])

class AdForm(StatesGroup):
    type = State()
    amount = State()
    rate = State()
    banks = State()

class OrderForm(StatesGroup):
    amount_rub = State()

def is_banned(user_id):
    return user_id in banned_users

from functools import wraps

def ban_check(func):
    @wraps(func)
    async def wrapper(message_or_call, *args, **kwargs):
        user_id = message_or_call.from_user.id
        if is_banned(user_id):
            await message_or_call.answer("üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
            return
        return await func(message_or_call, *args, **kwargs)
    return wrapper

@dp.message_handler(commands=["start"])
@ban_check
async def start(message: types.Message):
    ensure_balance(message.from_user.id)
    
    # üü° –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    msg = await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_kb(message.from_user.id))

    # ‚úÖ –ö–†–û–ö 1: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ message_id
    user_id = message.from_user.id
    chat_links.setdefault(user_id, {}).setdefault("msgs", []).append(msg.message_id)


@dp.message_handler(commands=["addusdt"])
async def add_usdt_handler(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    try:
        text = message.text.replace("\n", " ").strip()
        parts = text.split()

        if len(parts) != 3:
            return await message.answer(
                "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n<code>/addusdt 123456789 10</code>"
            )

        user_id = int(parts[1])
        amount = float(parts[2])

        ensure_balance(user_id)
        user_balances[user_id]["USDT (TRC20)"] += amount
        save_balances()

        confirm_msg = await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code> –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount} USDT (TRC20)."
        )

        # ‚úÖ –ö–†–û–ö 1: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        chat_links.setdefault(message.from_user.id, {}).setdefault("msgs", []).append(confirm_msg.message_id)

        try:
            user_msg = await bot.send_message(
                user_id,
                f"üí∞ –í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>{amount} USDT (TRC20)</b> –Ω–∞ –±–∞–ª–∞–Ω—Å."
            )

            # ‚úÖ –ö–†–û–ö 2: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –ø—ñ—à–ª–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            chat_links.setdefault(user_id, {}).setdefault("msgs", []).append(user_msg.message_id)

        except:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    except Exception as e:
        await message.answer(f"‚ùó –û—à–∏–±–∫–∞: {e}")

@dp.message_handler(commands=['removeusdt'])
async def remove_usdt(message: types.Message):
    try:
        parts = message.text.strip().split()
        if len(parts) != 3:
            reply_msg = await message.reply(
                "‚ùó –ù–∞–ø–∏—à–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
                "–ü—Ä–∏–º–µ—Ä:\n<code>/removeusdt 5138418509 10</code>"
            )
            chat_links.setdefault(message.from_user.id, {}).setdefault("msgs", []).append(reply_msg.message_id)
            return

        user_id = str(int(parts[1]))
        amount = float(parts[2])

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É—Å—Ç–∏–π –±–∞–ª–∞–Ω—Å, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —â–µ –Ω–µ–º–∞
        if user_id not in user_balances:
            user_balances[user_id] = {
                "USDT (TRC20)": 0.0,
                "USDT (TON)": 0.0,
                "BTC": 0.0,
                "ETH (ERC20)": 0.0,
                "BNB (BEP20)": 0.0,
                "TRX": 0.0,
            }

        if user_balances[user_id]["USDT (TRC20)"] < amount:
            warn_msg = await message.reply("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            chat_links.setdefault(message.from_user.id, {}).setdefault("msgs", []).append(warn_msg.message_id)
            return

        user_balances[user_id]["USDT (TRC20)"] -= amount
        save_balances()

        success_msg = await message.reply(
            f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> —Å–Ω—è—Ç–æ <b>{amount} USDT (TRC20)</b>."
        )
        chat_links.setdefault(message.from_user.id, {}).setdefault("msgs", []).append(success_msg.message_id)

        try:
            notify_msg = await bot.send_message(
                int(user_id),
                f"‚ùå –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–Ω—è—Ç–æ <b>{amount} USDT (TRC20)</b>."
            )
            chat_links.setdefault(int(user_id), {}).setdefault("msgs", []).append(notify_msg.message_id)
        except:
            pass

    except Exception as e:
        error_msg = await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        chat_links.setdefault(message.from_user.id, {}).setdefault("msgs", []).append(error_msg.message_id)


@dp.message_handler(commands=["backup"])
async def send_backup_file(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        warn = await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        chat_links.setdefault(message.from_user.id, {}).setdefault("msgs", []).append(warn.message_id)
        return

    try:
        with open(BALANCE_FILE, "rb") as f:
            sent = await bot.send_document(message.chat.id, f, caption="üìÇ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–ª–∞–Ω—Å–∞")
            chat_links.setdefault(message.from_user.id, {}).setdefault("msgs", []).append(sent.message_id)
    except FileNotFoundError:
        err = await message.answer("‚ö†Ô∏è –§–∞–π–ª –±–∞–ª–∞–Ω—Å–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        chat_links.setdefault(message.from_user.id, {}).setdefault("msgs", []).append(err.message_id)


@dp.message_handler(lambda m: m.text == "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
@ban_check
async def handle_top_up(message: types.Message):
    txt = (
        f"üí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ USDT –Ω–∞ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ:\n\n{get_wallets_text()}\n\n"
        f"‚ö†Ô∏è –ú–∏–Ω. —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî <b>{MIN_TOPUP}$</b>.\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    msg = await message.answer(
        txt,
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="topup_done")
        )
    )

    # üí¨ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ message_id –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –æ—á–∏—Å—Ç–∫–∏ –∞–±–æ —ñ—Å—Ç–æ—Ä—ñ—ó
    chat_links.setdefault(message.from_user.id, {}).setdefault("msgs", []).append(msg.message_id)

@dp.callback_query_handler(lambda c: c.data == "topup_done")
async def confirm_topup(call: types.CallbackQuery):
    user_id = call.from_user.id

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await call.message.answer("‚åõ –°–ø–∞—Å–∏–±–æ! –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.")

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    chat_links.setdefault(user_id, {}).setdefault("msgs", []).append(call.message.message_id)

    # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É (–æ–ø—Ü—ñ–π–Ω–æ)
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –Ω–∞–∂–∞–ª ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª.\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≤—Ä—É—á–Ω—É—é –∑–∞—á–∏—Å–ª–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ /addusdt."
            )
        except:
            pass

@dp.callback_query_handler(lambda c: c.data == "pledge_sent")
async def pledge_confirmation(call: types.CallbackQuery):
    user_id = call.from_user.id

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await call.message.answer(
        "‚åõ –°–ø–∞—Å–∏–±–æ!\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç 10 –¥–æ 30 –º–∏–Ω—É—Ç ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à –∑–∞–ª–æ–≥ –∏ –æ—Ç–∫—Ä–æ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
    )

    # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> –Ω–∞–∂–∞–ª <b>¬´–Ø –≤–Ω–µ—Å –∑–∞–ª–æ–≥¬ª</b>.\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é."
            )
        except:
            pass

@dp.callback_query_handler(lambda c: c.data == "payment_received")
async def payment_received(call: types.CallbackQuery):
    await call.message.answer("‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω.")
    await call.message.answer("‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç.", reply_markup=get_main_kb(call.from_user.id))

    target_username = chat_links.get(call.from_user.id, {}).get("with")
    target_id = None
    for uid, data in chat_links.items():
        if data.get("ad", {}).get("username") == target_username:
            target_id = uid
            break

    if target_id:
        await bot.send_message(target_id, "‚úÖ –û—Ä–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º.")
        chat_links.pop(target_id, None)

    chat_links.pop(call.from_user.id, None)


@dp.callback_query_handler(lambda c: c.data.startswith("admin_del:"))
async def admin_delete_ad(call: types.CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        return await call.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

    _, ad_type, idx = call.data.split(":")
    idx = int(idx)

    if 0 <= idx < len(user_ads[ad_type]):
        removed = user_ads[ad_type].pop(idx)

        # —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ user_orders —è–∫—â–æ —î
        for uid, ads in user_balances.get("user_orders", {}).items():
            if removed in ads:
                ads.remove(removed)

        await call.message.edit_text("üóë –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        await call.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.")

@dp.callback_query_handler(lambda c: c.data.startswith("delad:"))
@ban_check
async def delete_user_ad(call: types.CallbackQuery):
    idx = int(call.data.split(":")[1])
    user_id = call.from_user.id
    orders = user_balances.get("user_orders", {}).get(user_id, [])

    if 0 <= idx < len(orders):
        ad = orders.pop(idx)
        user_ads[ad["type"]].remove(ad)
        await call.message.edit_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await call.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")

@dp.message_handler(lambda m: m.text == "üëõ –ö–æ—à–µ–ª—ë–∫")
@ban_check
async def wallet_view(message: types.Message):
    ensure_balance(message.from_user.id)
    bal = user_balances[message.from_user.id]
    txt = "üëõ –í–∞—à –±–∞–ª–∞–Ω—Å:\n"
    for k, v in bal.items():
        txt += f"‚Ä¢ {k}: <b>{v:.2f}</b>\n"
    await message.answer(txt)

@dp.message_handler(lambda m: m.text == "üîª –í—ã–≤–µ—Å—Ç–∏ USDT")
async def handle_withdraw(message: types.Message):
    ensure_balance(message.from_user.id)
    usdt_balance = user_balances[message.from_user.id]["USDT (TRC20)"]

    if usdt_balance < 1:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞. –ú–∏–Ω–∏–º—É–º 10 USDT.")
        return

    await message.answer(
        f"üí∏ –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ USDT (TRC20).\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å TRC20-–∫–æ—à–µ–ª—å–∫–∞, –∫—É–¥–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ <b>{usdt_balance:.2f} USDT</b>.\n\n"
        f"–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É —Å ID: <code>{message.from_user.id}</code>."
    )

@dp.message_handler(lambda m: m.text == "üìã –û–±—ä—è–≤–ª–µ–Ω–∏—è")
@ban_check
async def show_ad_options(message: types.Message):
    await message.answer(
        f"üìä –û–±—ä—è–≤–ª–µ–Ω–∏–π:\nüî¥ –ü—Ä–æ–¥–∞–∂–∞: {len(user_ads['sell'])}\nüü¢ –ü–æ–∫—É–ø–∫–∞: {len(user_ads['buy'])}"
    )

@dp.message_handler(lambda m: m.text == "üóÇ –ú–æ–∏ –æ—Ä–¥–µ—Ä–∞")
@ban_check
async def show_my_orders(message: types.Message):
    user_id = message.from_user.id
    orders = user_balances.get("user_orders", {}).get(user_id, [])

    if not orders:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.")

    pledge_str = get_pledge_string(user_id)

    for idx, ad in enumerate(orders):
        text = (
            f"<b>#{idx + 1}</b> | –¢–∏–ø: <b>{ad['type']}</b>\n"
            f"–ö—É—Ä—Å: {ad['rate']}‚Ç¥\n"
            f"–û–±—ä—ë–º: {ad['limit']}\n"
            f"–ë–∞–Ω–∫–∏: {', '.join(ad['banks'])}\n"
            f"–ó–∞–ª–æ–≥: <b>{pledge_str}</b>\n"
            f"–£—Å–ª–æ–≤–∏—è: {ad.get('terms', '‚Äî')}"
        )
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delad:{idx}")
        )
        await message.answer(text, reply_markup=kb)


@dp.message_handler(lambda m: m.text == "üü¢ –ü–æ–∫—É–ø–∫–∞ USDT")
@ban_check
async def handle_buy(message: types.Message):
    await message.answer("üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω:", reply_markup=get_range_kb("buy"))

@dp.message_handler(lambda m: m.text == "üî¥ –ü—Ä–æ–¥–∞–∂–∞ USDT")
@ban_check
async def handle_sell(message: types.Message):
    ensure_balance(message.from_user.id)
    if user_balances[message.from_user.id]["USDT (TRC20)"] < 10:
        return await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
    await message.answer("üí∏ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω:", reply_markup=get_range_kb("sell"))

@dp.message_handler(commands=["clear_chat"], commands_prefix="/", user_id=ADMIN_IDS)
async def admin_clear_chat(message: types.Message):
    args = message.text.strip().split()
    if len(args) < 2:
        return await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>/clear_chat USER_ID</code>")

    try:
        target_id = int(args[1])

        msgs = chat_links.get(target_id, {}).get("msgs", [])
        deleted_count = 0

        for msg_id in msgs:
            try:
                await bot.delete_message(chat_id=target_id, message_id=msg_id)
                deleted_count += 1
            except Exception as e:
                continue  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏

        await message.answer(f"üßπ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count} –∏–∑ —á–∞—Ç–∞ <code>{target_id}</code>")
        chat_links[target_id]["msgs"] = []

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message_handler(lambda m: m.text == "üó®Ô∏è –ß–∞—Ç—ã")
async def admin_chat_list(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")

    if not chat_links:
        return await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")

    for user_id, data in chat_links.items():
        ad = data.get("ad", {})
        buyer_id = data.get("buyer_id", user_id)
        seller_username = ad.get("username", "‚Äî")
        ad_type = ad.get("type", "‚Äî")

        text = (
            f"üîÑ –ß–∞—Ç:\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <code>{buyer_id}</code>\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: <code>{seller_username}</code>\n"
            f"üì¶ –û—Ä–¥–µ—Ä: <b>{ad_type.upper()}</b>\n"
        )
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"adminchat:{buyer_id}")
        )
        await message.answer(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "close_order", state="*")
async def close_order(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    otype = data.get("order_type")

    if otype == "buy":
        return await call.message.answer("‚ùå –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.")

    try:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        pass

    await call.message.answer("‚úÖ –û—Ä–¥–µ—Ä –∑–∞–∫—Ä—ã—Ç.", reply_markup=get_main_kb(call.from_user.id))

    # üí¨ –û—á–∏—Å—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç—É
    user_id = call.from_user.id
    pair_id = active_orders.pop(user_id, None)
    if pair_id:
        active_orders.pop(pair_id, None)

    await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith("buy:") or c.data.startswith("sell:"))
@ban_check
async def show_filtered_ads(call: types.CallbackQuery):
    prefix, rng = call.data.split(":")
    min_sum, max_sum = map(int, rng.split("-"))
    ads = user_ads[prefix]

    def limit_in_range(ad_limit, selected_min, selected_max):
        try:
            ad_min, ad_max = parse_limit(ad_limit)
            return selected_min <= ad_min and ad_max <= selected_max
        except:
            return False

    filtered = [ad for ad in ads if limit_in_range(ad["limit"], min_sum, max_sum)]

    if not filtered:
        return await call.message.answer("üîç –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    msg_ids = []

    for i, ad in enumerate(filtered):
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üì© –û—Ç–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä", callback_data=f"open:{prefix}:{i}")
        )

        if call.from_user.id in ADMIN_IDS:
            kb.add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å (–∞–¥–º–∏–Ω–æ–º)", callback_data=f"admin_del:{prefix}:{i}"))

        msg = await call.message.answer(fmt_ad(ad, i), reply_markup=kb)
        msg_ids.append(msg.message_id)

    # –¥–æ–¥–∞—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ chat_links[uid]
    if call.from_user.id not in chat_links:
        chat_links[call.from_user.id] = {}

    chat_links[call.from_user.id]["msgs"] = msg_ids
    chat_links[call.from_user.id]["admins"] = ADMIN_IDS.copy()


@dp.callback_query_handler(lambda c: c.data.startswith("open:"), state="*")
@ban_check
async def open_order(call: types.CallbackQuery, state: FSMContext):
    _, otype, idx = call.data.split(":")
    idx = int(idx)

    ad = user_ads[otype][idx]
    buyer_id = call.from_user.id
    seller_username = ad["username"]

    if buyer_id not in chat_links:
        chat_links[buyer_id] = {}
    chat_links[buyer_id]["with"] = seller_username
    chat_links[buyer_id]["ad"] = ad

    if seller_username.startswith("User_"):
        seller_id = int(seller_username.replace("User_", ""))
        active_orders[buyer_id] = seller_id
        active_orders[seller_id] = buyer_id

        chat_links[seller_id] = {
            "with": buyer_id,
            "ad": ad
        }

        await state.update_data(
            order_type=otype,
            order_idx=idx,
            target_user=seller_id,
            ad_data=ad,
            buyer_id=buyer_id
        )

        msg = await bot.send_message(
            seller_id,
            f"üì© –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ!\n–°—É–º–º–∞ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é: {ad['limit']} ‚Ç¥"
        )
        log_message(seller_id, msg)

    else:
        await state.update_data(
            order_type=otype,
            order_idx=idx,
            ad_data=ad,
            buyer_id=buyer_id
        )

    # === –ü–†–û–î–ê–ñ ‚Äî —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏
    if otype == "sell":
        seller_id = int(ad["username"].replace("User_", "")) if ad["username"].startswith("User_") else None

        if seller_id and user_balances.get(seller_id, {}).get("USDT (TRC20)", 0) < 12:
            msg = await call.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞. –ú–∏–Ω–∏–º—É–º: 12 USDT.")
            log_message(buyer_id, msg)
            return

        await state.update_data(waiting_payment_details=True)

        msg = await call.message.answer("‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –±–∞–Ω–∫ –∏ —Ç.–¥.):")
        log_message(buyer_id, msg)
        return

    # === –ü–û–ö–£–ü–ö–ê ‚Äî –ø–∏—Ç–∞—î–º–æ —Å—É–º—É
    await OrderForm.amount_rub.set()
    msg = await call.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ UAH, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:")
    log_message(buyer_id, msg)

    # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if buyer_id in chat_links:
        for msg_id in chat_links[buyer_id].get("msgs", []):
            if msg_id != call.message.message_id:
                try:
                    await bot.delete_message(call.message.chat.id, msg_id)
                except:
                    pass

    chat_links[buyer_id] = {"admins": ADMIN_IDS.copy()}

    for admin_id in ADMIN_IDS:
        msg = await bot.send_message(
            admin_id,
            f"üì• –ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä ({otype.upper()})\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{buyer_id}</code>\n"
            f"–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤."
        )
        log_message(admin_id, msg)

    msg = await call.message.answer(
        "üí¨ –û—Ä–¥–µ—Ä –æ—Ç–∫—Ä—ã—Ç. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∑–¥–µ—Å—å.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="end_chat")
        )
    )
    log_message(buyer_id, msg)

    # –ó–∞—Ç—Ä–∏–º–∫–∞ 3 —Ö–≤
    await asyncio.sleep(180)

    if chat_links.get(buyer_id, {}).get("confirm_sent"):
        return
    chat_links[buyer_id]["confirm_sent"] = True

    msg = await bot.send_message(
        buyer_id,
        "–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm:{otype}:{idx}")
        )
    )
    log_message(buyer_id, msg)

@dp.callback_query_handler(lambda c: c.data.startswith("confirm:"))
async def confirm_payment(call: types.CallbackQuery):
    await call.answer()

    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞
    await_screenshot.add(call.from_user.id)

    msg = await call.message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.")
    log_message(call.from_user.id, msg)

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    if message.from_user.id in await_screenshot:
        await_screenshot.remove(message.from_user.id)

        for admin_id in ADMIN_IDS:
            msg = await bot.send_photo(
                admin_id,
                message.photo[-1].file_id,
                caption=f"üì§ –°–∫—Ä–∏–Ω –æ—Ç <code>{message.from_user.id}</code>"
            )
            log_message(admin_id, msg)

        msg = await message.answer("‚úÖ –°–∫—Ä–∏–Ω –ø–æ–ª—É—á–µ–Ω. USDT –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.")
        log_message(message.from_user.id, msg)


@dp.message_handler(commands=["sendbalances"])
async def send_balances_excel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
        with open("balances.json", "r", encoding="utf-8") as f:
            data = json.load(f)

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ DataFrame
        df = pd.DataFrame.from_dict(data, orient='index').reset_index()
        df.columns = ['User ID'] + list(df.columns[1:])

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —è–∫ Excel
        file_path = "balances.xlsx"
        df.to_excel(file_path, index=False)

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—É
        doc_msg = await bot.send_document(message.chat.id, open(file_path, "rb"), caption="üìä –¢–∞–±–ª–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        log_message(message.from_user.id, doc_msg)

    except Exception as e:
        error_msg = await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        log_message(message.from_user.id, error_msg)



@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
@ban_check
async def add_ad_start(message: types.Message):
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("üî¥ –ü—Ä–æ–¥–∞–∂–∞", callback_data="adtype:sell"),
        InlineKeyboardButton("üü¢ –ü–æ–∫—É–ø–∫–∞", callback_data="adtype:buy")
    )
    msg = await message.answer("üîÑ –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å USDT?", reply_markup=kb)
    log_message(message.from_user.id, msg)

@dp.callback_query_handler(lambda c: c.data.startswith("adtype:"))
async def ad_choose_type(call: types.CallbackQuery, state: FSMContext):
    _, adtype = call.data.split(":")
    user_id = call.from_user.id
    ensure_balance(user_id)

    # üõë –Ø–∫—â–æ —Ü–µ –ø—Ä–æ–¥–∞–∂ ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
    if adtype == "sell" and user_balances[user_id]["USDT (TRC20)"] < 10:
        msg = await call.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ. –ú–∏–Ω–∏–º—É–º: 10 USDT.")
        log_message(user_id, msg)
        return

    # üõë –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞—Å—Ç–∞–≤–∏
    pledge = merchant_deposits.get(user_id)
    if not pledge or pledge.get("amount", 0) < 200:
        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –Ø –≤–Ω–µ—Å –∑–∞–ª–æ–≥", callback_data="pledge_sent")
        )
        msg = await call.message.answer(
            "üîí –¢–æ–ª—å–∫–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ä—á–∞–Ω—Ç—ã –º–æ–≥—É—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n"
            "üí∞ –í–Ω–µ—Å–∏—Ç–µ –∑–∞–ª–æ–≥ –æ—Ç <b>200</b> –¥–æ <b>500 USDT</b> –Ω–∞ –∞–¥—Ä–µ—Å:\n\n"
            "<code>TQz9gQCkYpARgjhZ3LkgvjBPXP3CbHLs4j</code>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=kb
        )
        log_message(user_id, msg)
        return

    await state.update_data(adtype=adtype)
    await AdForm.amount.set()
    msg = await call.message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—É–º–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500‚Äì2000 ‚Ç¥):")
    log_message(user_id, msg)


@dp.callback_query_handler(lambda c: c.data == "delmsg")
async def handle_delete_message(call: types.CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        return await call.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
    try:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception as e:
        await call.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.")

@dp.callback_query_handler(lambda c: c.data.startswith("adminchat:"))
async def open_admin_chat(call: types.CallbackQuery):
    buyer_id = int(call.data.split(":")[1])
    admin_id = call.from_user.id

    if buyer_id not in chat_links:
        msg = await call.message.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        log_message(admin_id, msg)
        return

    chat_links[admin_id] = {"with": buyer_id, "is_admin": True}
    msg = await call.message.answer("üí¨ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —á–∞—Ç—É. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    log_message(admin_id, msg)

@dp.message_handler(state=AdForm.amount)
@ban_check
async def ad_set_amount(message: types.Message, state: FSMContext):
    text = message.text.strip()

    # –Ø–∫—â–æ –Ω–µ–º–∞—î –∑–Ω–∞—á–∫–∞ "‚Ç¥", –¥–æ–¥–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
    if "‚ÇΩ" not in text:
        text += " ‚ÇΩ"

    await state.update_data(amount=text)
    await AdForm.rate.set()
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –≤ ‚Ç¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 43.12):")


@dp.message_handler(state=AdForm.rate)
@ban_check
async def ad_set_rate(message: types.Message, state: FSMContext):
    await state.update_data(rate=message.text)
    await AdForm.banks.set()
    msg = await message.answer("üè¶ –£–∫–∞–∂–∏—Ç–µ –±–∞–Ω–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: MonoBank,PrivatBank,–ü–£–ú–ë):")
    log_message(message.from_user.id, msg)

@dp.message_handler(state=AdForm.banks)
@ban_check
async def ad_finish(message: types.Message, state: FSMContext):
    await state.update_data(banks=[b.strip() for b in message.text.split(",")])
    data = await state.get_data()

    user_id = message.from_user.id
    rate = float(data["rate"])
    ad_type = data["adtype"]
    limit_str = data["amount"]

    # üîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞—Å—Ç–∞–≤–∏
    pledge = merchant_deposits.get(user_id)
    if not pledge or pledge.get("amount", 0) < 200:
        msg = await message.answer(
            "‚õî –û–±—ä—è–≤–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ä—á–∞–Ω—Ç, –≤–Ω–µ—Å–∏—Ç–µ –∑–∞–ª–æ–≥ –æ—Ç 200 –¥–æ 500 USDT."
        )
        log_message(user_id, msg)
        return

    # ‚úÖ –Ø–∫—â–æ —Ü–µ –ü–†–û–î–ê–ñ ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
    if ad_type == "sell":
        try:
            min_limit, _ = parse_limit(limit_str)
            required_usdt = round(min_limit / rate, 2)

            current_usdt = user_balances.get(user_id, {}).get("USDT (TRC20)", 0)
            if current_usdt < required_usdt:
                msg = await message.answer(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n"
                    f"–ú–∏–Ω–∏–º—É–º –Ω—É–∂–Ω–æ: <b>{required_usdt} USDT</b>, —É –≤–∞—Å: <b>{current_usdt} USDT</b>."
                )
                log_message(user_id, msg)
                return
        except Exception as e:
            msg = await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")
            log_message(user_id, msg)
            return

    # === –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
    ad = {
        "username": f"User_{user_id}",
        "rate": rate,
        "limit": limit_str,
        "banks": data["banks"],
        "terms": "–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π",
        "type": ad_type
    }

    print("=== AD TYPE ===", data["adtype"])
    print("=== AD OBJECT ===", ad)

    # ‚ûï –î–æ–¥–∞—î–º–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫
    user_ads[ad_type].append(ad)

    # ‚ûï –î–æ–¥–∞—î–º–æ –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫
    if "user_orders" not in user_balances:
        user_balances["user_orders"] = {}
    if user_id not in user_balances["user_orders"]:
        user_balances["user_orders"][user_id] = []
    user_balances["user_orders"][user_id].append(ad)

    msg = await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.", reply_markup=get_main_kb(user_id))
    log_message(user_id, msg)
    await state.finish()

@dp.message_handler(commands=["confirm_pledge"])
async def confirm_pledge(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    try:
        parts = message.text.strip().split()
        if len(parts) != 3:
            return await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /confirm_pledge <user_id> <—Å—É–º–º–∞>")

        user_id = int(parts[1])
        amount = float(parts[2])

        merchant_deposits[user_id] = {
            "amount": amount,
            "target": MERCHANT_TARGET,
            "verified": True
        }

        save_merchant_deposits()

        await message.reply(f"‚úÖ –ó–∞–ª–æ–≥ {amount} USDT –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await bot.send_message(user_id, "‚úÖ –í–∞—à –∑–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—â–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
    except Exception as e:
        await message.reply(f"‚ùó –û—à–∏–±–∫–∞: {e}")


@dp.message_handler(state=OrderForm.amount_rub)
async def order_enter_amount(message: types.Message, state: FSMContext):
    amount_rub = message.text.strip()
    if not amount_rub.replace(".", "").isdigit():
        msg = await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ ‚Ç¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500).")
        log_message(message.from_user.id, msg)
        return

    amount_rub = float(amount_rub)
    data = await state.get_data()

    ad = data["ad_data"]
    buyer_id = message.from_user.id
    seller_id = int(ad["username"].replace("User_", "")) if ad["username"].startswith("User_") else None
    order_type = data["order_type"]
    order_idx = data["order_idx"]

    # === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
    try:
        min_limit, max_limit = parse_limit(ad["limit"])
        if not (min_limit <= amount_rub <= max_limit):
            msg = await message.answer(
                f"‚ùå –°—É–º–º–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ({min_limit} ‚Äì {max_limit} ‚Ç¥).\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —ç—Ç–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."
            )
            log_message(buyer_id, msg)
            return
    except:
        msg = await message.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –ª–∏–º–∏—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")
        log_message(buyer_id, msg)
        return

    # === –Ø–∫—â–æ –ü–†–û–î–ê–ñ ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å –ø—Ä–æ–¥–∞–≤—Ü—è
    if order_type == "sell" and seller_id:
        usdt_balance = user_balances.get(seller_id, {}).get("USDT (TRC20)", 0)
        required_usdt = round(amount_rub / ad["rate"], 2)

        if usdt_balance < required_usdt:
            msg = await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞.\n"
                f"–ù—É–∂–Ω–æ: <b>{required_usdt} USDT</b>, –µ—Å—Ç—å: <b>{usdt_balance} USDT</b>"
            )
            log_message(buyer_id, msg)
            return

        user_balances[seller_id]["USDT (TRC20)"] -= required_usdt
        save_balances()

    # === –ó–≤'—è–∑–∫–∏
    chat_links[buyer_id] = {"target": seller_id, "admins": ADMIN_IDS.copy()}
    if seller_id:
        chat_links[seller_id] = {"target": buyer_id, "admins": ADMIN_IDS.copy()}

    # ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–∫—É–ø—Ü—é
    msg1 = await message.answer(
        f"üì© –û—Ä–¥–µ—Ä –æ—Ç–∫—Ä—ã—Ç!\n–°—É–º–º–∞: <b>{amount_rub} ‚Ç¥</b>\n–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å –æ—Ä–¥–µ—Ä", callback_data="close_order")
        )
    )
    log_message(buyer_id, msg1)

    # ‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–≤—Ü—é
    if seller_id:
        msg2 = await bot.send_message(
            seller_id,
            f"üì• –í–∞—à –æ—Ä–¥–µ—Ä –æ—Ç–∫—Ä—ã–ª–∏ –Ω–∞ —Å—É–º–º—É <b>{amount_rub} ‚Ç¥</b>!\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –ø—Ä—è–º–æ –∑–¥–µ—Å—å."
        )
        log_message(seller_id, msg2)

    # üïí –ó–∞—Ç—Ä–∏–º–∫–∞ 3 —Ö–≤–∏–ª–∏–Ω–∏ —ñ –ø–æ—è–≤–∞ –∫–Ω–æ–ø–∫–∏
    await asyncio.sleep(180)

    if chat_links.get(buyer_id, {}).get("confirm_button_sent"):
        return

    chat_links[buyer_id]["confirm_button_sent"] = True

    msg3 = await bot.send_message(
        buyer_id,
        "–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm:{order_type}:{order_idx}")
        )
    )
    log_message(buyer_id, msg3)

    await state.finish()


@dp.message_handler(state="*", content_types=types.ContentType.TEXT)
async def handle_payment_details(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if data.get("waiting_payment_details"):
        buyer_id = data.get("buyer_id")
        if not buyer_id:
            msg = await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            log_message(message.from_user.id, msg)
            return

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –ø–æ–∫—É–ø—Ü—é
        msg1 = await bot.send_message(buyer_id, f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞:\n<code>{message.text}</code>")
        log_message(buyer_id, msg1)

        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–≤—Ü—é
        msg2 = await message.answer("‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.")
        log_message(message.from_user.id, msg2)

        # –ö–Ω–æ–ø–∫–∞ "–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã"
        msg3 = await message.answer(
            "üü¢ –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏—Ç–µ –æ–ø–ª–∞—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã", callback_data="payment_received")
            )
        )
        log_message(message.from_user.id, msg3)

        await state.finish()

# === –ü—Ä–æ–∫–ª–∞–¥–∫–∞: –∞–¥–º—ñ–Ω –±–∞—á–∏—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@dp.message_handler(lambda m: m.from_user.id in ADMIN_IDS)
async def admin_to_user(message: types.Message):
    text = message.text.strip()
    try:
        uid_str, msg = text.split(" ", 1)
        uid = int(uid_str)
        reply_markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delmsg")
        )
        await bot.send_message(uid, msg, reply_markup=reply_markup)
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await message.answer("‚ùó –ù–∞–ø–∏—à–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –∑–∞—Ç–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä:\n<code>5138418509 –ü—Ä–∏–≤–µ—Ç</code>")

    try:
        uid_str, msg = text.split(" ", 1)
        uid = int(uid_str)
        await bot.send_message(uid, msg)
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")



# === –ü—Ä–æ–∫–ª–∞–¥–∫–∞: –∞–¥–º—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
@dp.message_handler(lambda m: m.from_user.id in ADMIN_IDS and m.reply_to_message and m.reply_to_message.text)
async def admin_reply_handler(message: types.Message):
    lines = message.reply_to_message.text.split("\n")
    for line in lines:
        if "–æ—Ç" in line and "–°–æ–æ–±—â–µ–Ω–∏–µ" in line:
            uid = int(line.split("–æ—Ç")[1].split(":")[0].strip())
            reply_markup = InlineKeyboardMarkup().add(
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delmsg")
            )
            await bot.send_message(uid, message.text, reply_markup=reply_markup)
            break

@dp.message_handler(lambda m: m.from_user.id in active_orders)
async def relay_message_between_users(message: types.Message):
    sender_id = message.from_user.id
    recipient_id = active_orders.get(sender_id)
    if not recipient_id:
        return

    sender_name = f"@{message.from_user.username}" if message.from_user.username else f"User {sender_id}"

# --- 1. –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è –≤–∂–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏—Ö ID ---
sent_chat_ids = set()

# --- 2. –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ---
@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "‚Äî"

    if user_id not in sent_chat_ids:
        sent_chat_ids.add(user_id)
        for admin_id in ADMIN_IDS:
            await bot.send_message(
                admin_id,
                f"üì© –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á!\n"
                f"üë§ ID: <code>{user_id}</code>\n"
                f"üîó Username: @{username}"
            )

    # –¢—É—Ç –º–æ–∂–µ—à –∑–∞–ª–∏—à–∏—Ç–∏ –∞–±–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ —ñ–Ω—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    # await message.answer("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ.")

# --- 3. –û–±—Ä–æ–±–∫–∞ –±—É–¥—å-—è–∫–æ—ó –∫–Ω–æ–ø–∫–∏ ---
@dp.callback_query_handler(lambda call: True)
async def handle_callback(call: types.CallbackQuery):
    user_id = call.from_user.id
    username = call.from_user.username or "‚Äî"

    if user_id not in sent_chat_ids:
        sent_chat_ids.add(user_id)
        for admin_id in ADMIN_IDS:
            await bot.send_message(
                admin_id,
                f"üì© –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (callback)!\n"
                f"üë§ ID: <code>{user_id}</code>\n"
                f"üîó Username: @{username}"
            )

    await call.answer()


    # === –¢–µ–∫—Å—Ç ===
    if message.text:
        text = f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}:\n{message.text}"
        await bot.send_message(recipient_id, text)

        # –õ–æ–≥ –¥–ª—è –∞–¥–º—ñ–Ω–∞
        for admin in ADMIN_IDS:
            await bot.send_message(admin, f"üì© [{sender_id} ‚ûù {recipient_id}]: {message.text}")

    # === –§–æ—Ç–æ ===
    elif message.photo:
        file = message.photo[-1].file_id
        caption = f"üì∑ –§–æ—Ç–æ –æ—Ç {sender_name}"
        await bot.send_photo(recipient_id, file, caption=caption)
        for admin in ADMIN_IDS:
            await bot.send_photo(admin, file, caption=f"üì• [{sender_id} ‚ûù {recipient_id}] –§–æ—Ç–æ")

    # === –î–æ–∫—É–º–µ–Ω—Ç ===
    elif message.document:
        file = message.document.file_id
        await bot.send_document(recipient_id, file, caption=f"üìé –§–∞–π–ª –æ—Ç {sender_name}")
        for admin in ADMIN_IDS:
            await bot.send_document(admin, file, caption=f"üì• [{sender_id} ‚ûù {recipient_id}] –î–æ–∫—É–º–µ–Ω—Ç")

    # === –í—ñ–¥–µ–æ ===
    elif message.video:
        file = message.video.file_id
        await bot.send_video(recipient_id, file, caption=f"üé• –í–∏–¥–µ–æ –æ—Ç {sender_name}")
        for admin in ADMIN_IDS:
            await bot.send_video(admin, file, caption=f"üì• [{sender_id} ‚ûù {recipient_id}] –í–∏–¥–µ–æ")

    # === –ì–æ–ª–æ—Å–æ–≤–µ ===
    elif message.voice:
        file = message.voice.file_id
        await bot.send_voice(recipient_id, file, caption=f"üé§ –ì–æ–ª–æ—Å–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}")
        for admin in ADMIN_IDS:
            await bot.send_voice(admin, file, caption=f"üì• [{sender_id} ‚ûù {recipient_id}] Voice")

    else:
        await message.reply("‚ö†Ô∏è –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.")

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—É
    await bot.send_message(target_id, f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or 'user'}:\n{message.text}")

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É –∫–æ–ø—ñ—é
    for admin in ADMIN_IDS:
        await bot.send_message(admin, f"üì© [–î–∏–∞–ª–æ–≥] {user_id} ‚ûù {target_id}:\n{message.text}")

@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.DOCUMENT, types.ContentType.VIDEO])
async def user_media_relay(message: types.Message):
    user_id = message.from_user.id

    if user_id not in chat_links or "with" not in chat_links[user_id]:
        return  # –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç—É

    target_username = chat_links[user_id]["with"]

    # –∑–Ω–∞–π—Ç–∏ ID —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ –ø–æ username
    target_id = None
    for uid, data in chat_links.items():
        if data.get("ad", {}).get("username") == target_username:
            target_id = uid
            break

    if not target_id:
        return await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

    caption = f"üìé –û—Ç @{message.from_user.username or 'user'}"
    admins_caption = f"üì• –ú–µ–¥–∏–∞: {user_id} ‚ûù {target_id}"

    if message.photo:
        await bot.send_photo(target_id, message.photo[-1].file_id, caption=caption)
        for admin in ADMIN_IDS:
            await bot.send_photo(admin, message.photo[-1].file_id, caption=admins_caption)
    elif message.document:
        await bot.send_document(target_id, message.document.file_id, caption=caption)
        for admin in ADMIN_IDS:
            await bot.send_document(admin, message.document.file_id, caption=admins_caption)
    elif message.video:
        await bot.send_video(target_id, message.video.file_id, caption=caption)
        for admin in ADMIN_IDS:
            await bot.send_video(admin, message.video.file_id, caption=admins_caption)

@dp.callback_query_handler(lambda c: c.data == "end_chat")
async def end_chat(call: types.CallbackQuery):
    user_id = call.from_user.id

    if user_id not in chat_links or "with" not in chat_links[user_id]:
        return await call.message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.")

    # –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –æ–±–æ—Ö
    target_username = chat_links[user_id]["with"]
    target_id = None

    for uid, data in chat_links.items():
        if data.get("ad", {}).get("username") == target_username:
            target_id = uid
            break

    if target_id:
        await bot.send_message(target_id, "‚ùå –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π.")
        chat_links.pop(target_id, None)

    await call.message.answer("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    chat_links.pop(user_id, None)

@dp.message_handler(content_types=types.ContentTypes.ANY)
async def relay_messages(message: types.Message):
    sender_id = message.from_user.id
    if sender_id in active_orders:
        recipient_id = active_orders[SendGrid]
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –º–µ–¥—ñ–∞   
        if message.content_type == "text":
            await bot.send_message(recipient_id, f"üí¨ {message.text}")
        elif message.content_type in ["photo", "document", "video", "voice"]:
            await bot.copy_message(recipient_id, sender_id, message.message_id)


# === –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

